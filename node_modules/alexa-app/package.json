{
  "_args": [
    [
      {
        "raw": "alexa-app",
        "scope": null,
        "escapedName": "alexa-app",
        "name": "alexa-app",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/weisso/Desktop/6_semester/github/apps/testApp"
    ]
  ],
  "_from": "alexa-app@latest",
  "_id": "alexa-app@4.0.0",
  "_inCache": true,
  "_location": "/alexa-app",
  "_nodeVersion": "7.7.3",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/alexa-app-4.0.0.tgz_1490022182852_0.6071845113765448"
  },
  "_npmUser": {
    "name": "ajcrites",
    "email": "ajcrites@gmail.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "alexa-app",
    "scope": null,
    "escapedName": "alexa-app",
    "name": "alexa-app",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/alexa-app/-/alexa-app-4.0.0.tgz",
  "_shasum": "9b74cc6e86dd6728ca6f1fa4b25a1bb397896283",
  "_shrinkwrap": null,
  "_spec": "alexa-app",
  "_where": "/Users/weisso/Desktop/6_semester/github/apps/testApp",
  "author": {
    "name": "Matt Kruse",
    "email": "github@mattkruse.com",
    "url": "http://mattkruse.com"
  },
  "bugs": {
    "url": "https://github.com/alexa-js/alexa-app/issues"
  },
  "dependencies": {
    "alexa-utterances": "^0.2.0",
    "alexa-verifier-middleware": "^0.2.1",
    "bluebird": "^2.10.2",
    "body-parser": "^1.15.2",
    "lodash.defaults": "^4.2.0",
    "numbered": "^1.0.0"
  },
  "description": "A module to simplify creation of Alexa (Amazon Echo) apps (Skills) using Node.js",
  "devDependencies": {
    "chai": "^3.4.1",
    "chai-as-promised": "^5.3.0",
    "chai-string": "^1.3.0",
    "coveralls": "^2.11.9",
    "danger": "0.6.10",
    "ejs": "^2.5.5",
    "eslint": "^2.9.0",
    "esprima": "^3.1.3",
    "express": "^4.14.0",
    "istanbul": "^0.4.3",
    "mocha": "^2.3.4",
    "sinon": "^1.17.7",
    "sinon-chai": "^2.8.0",
    "supertest": "^2.0.1"
  },
  "directories": {},
  "dist": {
    "shasum": "9b74cc6e86dd6728ca6f1fa4b25a1bb397896283",
    "tarball": "https://registry.npmjs.org/alexa-app/-/alexa-app-4.0.0.tgz"
  },
  "engines": {
    "node": ">=0.12"
  },
  "gitHead": "8147e90ead97b1bf6bcae15d2a7f18c28456b707",
  "homepage": "https://github.com/alexa-js/alexa-app#readme",
  "keywords": [
    "amazon",
    "echo",
    "alexa",
    "skills"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "ajcrites",
      "email": "ajcrites@gmail.com"
    },
    {
      "name": "dblock",
      "email": "dblock@dblock.org"
    },
    {
      "name": "mkruse",
      "email": "github@mattkruse.com"
    }
  ],
  "name": "alexa-app",
  "optionalDependencies": {},
  "readme": "## Table of Contents\n* [Stable Release](#stable-release)\n* [Introduction](#introduction)\n* [Features](#features)\n* [Examples](#examples)\n    * [AWS Lambda](#aws-lambda)\n    * [Express](#express)\n* [API](#api)\n    * [request](#request)\n    * [response](#response)\n    * [session](#session)\n* [Request Handlers](#request-handlers)\n    * [LaunchRequest](#launchrequest)\n    * [IntentRequest](#intentrequest)\n    * [SessionEndRequest](#sessionendrequest)\n    * [AudioPlayer Event Request](#audioplayer-event-request)\n    * [PlaybackController Event Request](#playbackcontroller-event-request)\n* [Execute Code On Every Request](#execute-code-on-every-request)\n    * [pre()](#pre)\n    * [post()](#post)\n* [Schema and Utterances](#schema-and-utterances)\n    * [Schema Syntax](#schema-syntax)\n        * [slots](#slots)\n        * [custom slot types](#custom-slot-types)\n        * [utterances](#utterances)\n            * [Using a Dictionary](#using-a-dictionary)\n    * [Generating Schema and Utterances Output](#generating-schema-and-utterances-output)\n* [Cards](#cards)\n    * [Card Examples](#card-examples)\n* [Error Handling](#error-handling)\n* [Asynchronous Handlers Example](#asynchronous-handlers-example)\n    * [Customizing Default Error Messages](#customizing-default-error-messages)\n    * [Read/write session data](#readwrite-session-data)\n    * [Define a custom endpoint name for an app](#define-a-custom-endpoint-name-for-an-app)\n* [License](#license)\n\n# alexa-app\n\nA Node module to simplify the development of Alexa skills (applications.)\n\n[![NPM](https://img.shields.io/npm/v/alexa-app.svg)](https://www.npmjs.com/package/alexa-app/)\n[![Build Status](https://travis-ci.org/alexa-js/alexa-app.svg?branch=master)](https://travis-ci.org/alexa-js/alexa-app)\n[![Coverage Status](https://coveralls.io/repos/github/alexa-js/alexa-app/badge.svg?branch=master)](https://coveralls.io/github/alexa-js/alexa-app?branch=master)\n\n## Stable Release\n\nYou're reading the documentation for the next release of alexa-app. Please see [CHANGELOG](CHANGELOG.md) and make sure to read [UPGRADING](UPGRADING.md) when upgrading from a previous version. The current stable release is [4.0.0](https://github.com/alexa-js/alexa-app/tree/v4.0.0).\n\n## Introduction\n\nThis module parses HTTP JSON requests from the Alexa platform and builds the JSON response that consumed by an Alexa-compatible device, such as the Echo.\n\nIt provides a DSL for defining intents, convenience methods to more easily build the response, handle session objects, and add cards.\n\nThe intent schema definition and sample utterances are included in your application's definition, making it very simple to generate hundreds (or thousands!) of sample utterances with a few lines.\n\nThis module provides a way to host a standalone web service for an Alexa skill. If you're looking for a full-fledged application server\nor the ability to host multiple skills, check out [alexa-app-server](https://github.com/alexa-js/alexa-app-server).\n\n\n## Features\n\n- simplified handling of requests and generating responses\n- support for asynchronous handlers\n- easy connection into AWS Lambda or Node.js Express, etc.\n- auto-generation of intent schema and sample utterances\n- support for session data\n- comprehensive test suite\n\n\n## Examples\n\n### AWS Lambda\n\nAmazon skills that use alexa-app have a built-in `handler` method to handle calls from AWS Lambda.\nYou need to make sure that the Handler is set to `index.handler`, which is the default value.\n\n```javascript\nvar alexa = require(\"alexa-app\");\nvar app = new alexa.app(\"sample\");\n\napp.intent(\"number\", {\n    \"slots\": { \"number\": \"AMAZON.NUMBER\" },\n    \"utterances\": [\"say the number {-|number}\"]\n  },\n  function(request, response) {\n    var number = request.slot(\"number\");\n    response.say(\"You asked for the number \" + number);\n  }\n);\n\n// connect the alexa-app to AWS Lambda\nexports.handler = app.lambda();\n```\n\nFor backwards compatibility, or if you wish to change the Handler mapping to something other than index.handler, you can use the lambda() function.\n\nA full lambda example is available [here](example/lambda.js).\n\n\n### Express\n\n```javascript\nvar express = require(\"express\");\nvar alexa = require(\"alexa-app\");\nvar express_app = express();\n\nvar app = new alexa.app(\"sample\");\n\napp.intent(\"number\", {\n    \"slots\": { \"number\": \"AMAZON.NUMBER\" },\n    \"utterances\": [\"say the number {-|number}\"]\n  },\n  function(request, response) {\n    var number = request.slot(\"number\");\n    response.say(\"You asked for the number \" + number);\n  }\n);\n\n// setup the alexa app and attach it to express before anything else\napp.express({ expressApp: express_app });\n\n// now POST calls to /sample in express will be handled by the app.request() function\n// GET calls will not be handled\n\n// from here on, you can setup any other express routes or middleware as normal\n```\n\nThe express function accepts the following parameters.\n\n* `expressApp` the express app instance to attach to\n* `router` the express router instance to attach to\n* `endpoint` the path to attach the express app or router to (e.g., passing `'mine'` attaches to `/mine`)\n* `checkCert` when true, applies Alexa certificate checking _(default: true)_\n* `debug` when true, sets up the route to handle GET requests _(default: false)_\n* `preRequest` function to execute before every POST\n* `postRequest` function to execute after every POST\n\nEither `expressApp` or `router` is required.\nA full express example is available [here](example/express.js).\n\n\n## API\n\nSkills define handlers for launch, intent, and session end, just like normal Alexa development. The alexa-app module provides a layer around this functionality that simplifies the interaction. Each handler gets passed a request and response object, which are custom for this module.\n\n### request\n\n```javascript\n// return the type of request received (LaunchRequest, IntentRequest, SessionEndedRequest)\nString request.type()\n\n// return the value passed in for a given slot name\nString request.slot(\"slotName\")\n\n// check if you can use session (read or write)\nBoolean request.hasSession()\n\n// return the session object\nSession request.getSession()\n\n// return the request context\nrequest.context\n\n// the raw request JSON object\nrequest.data\n```\n\n\n### response\n\nThe response JSON object is automatically built for you. All you need to do is tell it what you want to output.\n\n```javascript\n// tell Alexa to say something; multiple calls to say() will be appended to each other\n// all text output is treated as SSML\nresponse.say(String phrase)\n\n// empty the response text\nresponse.clear()\n\n// tell Alexa to re-prompt the user for a response, if it didn't hear anything valid\nresponse.reprompt(String phrase)\n\n// return a card to the user's Alexa app\n// for Object definition @see https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/alexa-skills-kit-interface-reference#card-object\n// skill supports card(String title, String content) for backwards compat of type \"Simple\"\nresponse.card(Object card)\n\n// return a card instructing the user how to link their account to the skill\n// this internally sets the card response\nresponse.linkAccount()\n\n// play audio stream (send AudioPlayer.Play directive) @see https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/custom-audioplayer-interface-reference#play-directive\n// skill supports stream(String url, String token, String expectedPreviousToken, Integer offsetInMilliseconds)\nresponse.audioPlayerPlayStream(String playBehavior, Object stream)\n\n// stop playing audio stream (send AudioPlayer.Stop directive)\nresponse.audioPlayerStop()\n\n// clear audio player queue (send AudioPlayer.ClearQueue directive)\n// clearBehavior is \"CLEAR_ALL\" by default\nresponse.audioPlayerClearQueue([ String clearBehavior ])\n\n// tell Alexa whether the user's session is over; sessions end by default\n// you can optionally pass a reprompt message\nresponse.shouldEndSession(boolean end [, String reprompt] )\n\n// send the response to the Alexa device (success) immediately\n// this returns a promise that you must return to continue the\n// promise chain. Calling this is optional in most cases as it\n// will be called automatically when the handler promise chain\n// resolves, but you can call it and return its value in the\n// chain to send the response immediately. You can also use it\n// to send a response from `post` after failure.\nasync response.send()\n\n// trigger a response failure\n// the internal promise containing the response will be rejected, and should be handled by the calling environment\n// instead of the Alexa response being returned, the failure message will be passed\n// similar to `response.send()`, you must return the value returned from this call to continue the promise chain\n// this is equivalent to calling `throw message` in handlers\n// *NOTE:* this does not generate a response compatible with Alexa, so when calling it explicitly you may want to handle the response with `.error` or `.post`\nasync response.fail(String message)\n\n// calls to response can be chained together\nreturn response.say(\"OK\").send()\n```\n\n\n### session\n```javascript\n// check if you can use session (read or write)\nBoolean request.hasSession()\n\n// get the session object\nvar session = request.getSession()\n\n// set a session variable\n// by defailt, Alexa only persists session variables to the next request\n// the alexa-app module makes session variables persist across multiple requests\n// Note that you *must* use `.set` or `.clear` to update\n// session properties. Updating properties of `attributeValue`\n// that are objects will not persist until `.set` is called\nsession.set(String attributeName, String attributeValue)\n\n// return the value of a session variable\nString session.get(String attributeName)\n\n// session details, as passed by Amazon in the request\nsession.details = { ... }\n```\n\n\n## Request Handlers\n\nYour app can define a single handler for the `Launch` event and the `SessionEnded` event, and multiple intent handlers.\n\n### LaunchRequest\n\n```javascript\napp.launch(function(request, response) {\n  response.say(\"Hello World\");\n  response.card(\"Hello World\", \"This is an example card\");\n});\n```\n\n\n### IntentRequest\n\nDefine the handler for multiple intents using multiple calls to `intent()`.\nIntent schema and sample utterances can also be passed to `intent()`, which is detailed below.\nIntent handlers that don't return an immediate response (because they do some asynchronous operation) must return a Promise. The response will be sent when the promise is resolved and fail when the promise is rejected.\nSee example further below.\n\n```javascript\napp.intent(\"live\", {\n    \"slots\": {\n      \"city\": \"AMAZON.US_CITY\"\n    },\n    \"utterances\": [\n      \"in {-|city}\"\n    ]\n  }, function(request, response) {\n    response.say(\"You live in \" + request.slot(\"city\"));\n  }\n);\n\napp.intent(\"vacation\", function(request, response) {\n  response.say(\"You're now on vacation.\");\n});\n```\n\n\n### SessionEndRequest\n\n```javascript\napp.sessionEnded(function(request, response) {\n  // cleanup the user's server-side session\n  logout(request.userId);\n  // no response required\n});\n```\n\n\n### AudioPlayer Event Request\n\nDefine the handler for multiple events using multiple calls to `audioPlayer()`. You can define only one handler per event. Event handlers that don't return an immediate response (because they do some asynchronous operation) must return a Promise.\n\nYou can define handlers for the following events:\n\n* PlaybackStarted\n* PlaybackFinished\n* PlaybackStopped\n* PlaybackNearlyFinished\n* PlaybackFailed\n\nRead more about AudioPlayer request types in [AudioPlayer Interface Doc](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/custom-audioplayer-interface-reference#audioplayer-requests).\n\nThe following example will return `play` directive with a next audio on `AudioPlayer.PlaybackNearlyFinished` request.\n\n```javascript\napp.audioPlayer(\"PlaybackNearlyFinished\", function(request, response) {\n  // immediate response\n  var stream = {\n    \"url\": \"https://next-song-url\",\n    \"token\": \"some_token\",\n    \"expectedPreviousToken\": \"some_previous_token\",\n    \"offsetInMilliseconds\": 0\n  };\n  response.audioPlayerPlayStream(\"ENQUEUE\", stream);\n});\n```\n\nSee an example of asynchronous response below.\n\n```javascript\napp.audioPlayer(\"PlaybackFinished\", function(request, response) {\n  // async response\n  return getNextSongFromDBAsync()\n  .then(function(url, token) {\n    var stream = {\n      \"url\": url,\n      \"token\": token,\n      \"expectedPreviousToken\": \"some_previous_token\",\n      \"offsetInMilliseconds\": 0\n    };\n    response.audioPlayerPlayStream(\"ENQUEUE\", stream);\n  });\n});\n```\n\n\n### PlaybackController Event Request\n\nPlaybackController events are sent to your skill when the user interacts with player controls on a device. Define multiple handlers for various events by making multiple calls to `playbackController` with each event type.\n\nYou can define handlers for the following events:\n\n* PlayCommandIssued\n* PauseCommandIssued\n* NextCommandIssued\n* PreviousCommandIssued\n\nRead more about PlaybackController requests in the [PlaybackController Interface Reference](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/custom-playbackcontroller-interface-reference).\n\nThe following example will send a play directive to the device when a user presses the \"next\" button.\n\n```javascript\napp.playbackController('NextCommandIssued', (request, response) => {\n  var stream = {\n    \"url\": \"https://next-song-url\",\n    \"token\": \"some_token\",\n    \"expectedPreviousToken\": \"some_previous_token\",\n    \"offsetInMilliseconds\": 0\n  };\n  response.audioPlayerPlayStream(\"REPLACE_ALL\", stream);\n});\n```\n\nNote that some device interactions don't always produce PlaybackController events. See the [PlaybackController Interface Introduction](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/custom-playbackcontroller-interface-reference#introduction) for more details.\n\n## Execute Code On Every Request\n\nIn addition to specific event handlers, you can define functions that will run on every request.\n\n\n### pre()\n\nExecuted before any event handlers. This is useful to setup new sessions, validate the `applicationId`, or do any other kind of validations.\nYou can perform asynchronous functionality in `pre` by returning a Promise.\n\n```javascript\napp.pre = function(request, response, type) {\n  if (request.applicationId != \"amzn1.echo-sdk-ams.app.000000-d0ed-0000-ad00-000000d00ebe\") {\n    // fail ungracefully\n    throw \"Invalid applicationId\";\n    // `return response.fail(\"Invalid applicationId\")` will also work\n  }\n};\n\n// Asynchronous\napp.pre = function(request, response, type) {\n  return db.getApplicationId().then(function(appId) {\n    if (request.applicationId != appId) {\n      throw new Error(\"Invalid applicationId\");\n    }\n  });\n};\n```\n\nNote that the `post()` method still gets called, even if the `pre()` function calls `send()` or `fail()`. The post method can always override anything done before it.\n\n\n### post()\n\nThe last thing executed for every request. It is even called if there is an exception or if a response has already been sent. The `post()` function can change anything about the response. It can even turn a `return response.fail()` into a `return respond.send()` with entirely new content. If `post()` is called after an exception is thrown, the exception itself will be the 4th argument.\n\nYou can perform asynchronous functionality in `pre` by returning a Promise similar to `pre` or any of the handlers.\n\n```javascript\napp.post = function(request, response, type, exception) {\n  if (exception) {\n    // always turn an exception into a successful response\n    return response.clear().say(\"An error occured: \" + exception).send();\n  }\n};\n```\n\n\n## Schema and Utterances\n\nThe alexa-app module makes it easy to define your intent schema and generate many sample utterances. Optionally pass your schema definition along with your intent handler, and extract the generated content using the `schema()` and `utterances()` functions on your app.\n\n\n### Schema Syntax\n\nPass an object with two properties: slots and utterances.\n\n```javascript\napp.intent(\"sampleIntent\", {\n    \"slots\": {\n      \"NAME\": \"AMAZON.US_FIRST_NAME\",\n      \"AGE\": \"AMAZON.NUMBER\"\n    },\n    \"utterances\": [\n      \"my {name is|name's} {NAME} and {I am|I'm} {-|AGE}{ years old|}\"\n    ]\n  },\n  function(request, response) { ... }\n);\n```\n\n\n#### slots\n\nThe slots object is a simple `name: type` mapping. The type must be one of Amazon's [built-in slot types](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/slot-type-reference), such as `AMAZON.DATE` or `AMAZON.NUMBER`.\n\n\n#### custom slot types\n\n[Custom slot types](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/alexa-skills-kit-interaction-model-reference#Custom Slot Type Syntax) are supported via the following syntax.\n\n```javascript\napp.intent(\"sampleIntent\", {\n    \"slots\": {\n      \"CustomSlotName\": \"CustomSlotType\"\n    },\n    \"utterances\": [\n      \"airport {information|status} for {-|CustomSlotName}\"\n    ]\n  },\n  function(request, response) { ... }\n);\n```\n\nThis will result in the following utterance list.\n\n```\nsampleIntent     airport information for {CustomSlotName}\nsampleIntent     airport status for {CustomSlotName}\n```\n\nNote that the \"CustomSlotType\" type values must be specified in the Skill Interface's Interaction Model for the custom slot type to function correctly.\n\n\n#### utterances\n\nThe utterances syntax allows you to generate many (hundreds or even thousands) of sample utterances using just a few samples that get auto-expanded.\nAny number of sample utterances may be passed in the utterances array.\n\nThis module internally uses [alexa-utterances](https://github.com/alexa-js/alexa-utterances)\nto expand these convenient strings into a format that alexa understands. Read the documentation there for a\nthorough set of examples on how to use this.\n\n\n##### Using a Dictionary\n\nSeveral intents may use the same list of possible values, so you want to define them in one place, not in each intent schema. Use the app's dictionary.\n\n```javascript\napp.dictionary = {\"colors\":[\"red\",\"green\",\"blue\"]};\n...\n\"my favorite color is {colors|FAVEORITE_COLOR}\"\n\"I like {colors|COLOR}\"\n```\n\n\n### Generating Schema and Utterances Output\n\nTo get the generated content out of your app, call the `schema()` and `utterances()` functions. See [example/express.js](example/express.js) for one way to output this data.\n\n```javascript\n// returns a String representation of the JSON object\napp.schema() =>\n\n{\n  \"intents\": [{\n    \"intent\": \"MyColorIsIntent\",\n    \"slots\": [{\n      \"name\": \"Color\",\n      \"type\": \"AMAZON.Color\"\n    }]\n  }]\n}\n\napp.utterances() =>\n\nMyColorIsIntent  my color is {dark brown|Color}\nMyColorIsIntent  my color is {green|Color}\nMyColorIsIntent  my favorite color is {red|Color}\nMyColorIsIntent  my favorite color is {navy blue|Color}\nWhatsMyColorIntent whats my color\nWhatsMyColorIntent what is my color\nWhatsMyColorIntent say my color\nWhatsMyColorIntent tell me my color\nWhatsMyColorIntent whats my favorite color\nWhatsMyColorIntent what is my favorite color\nWhatsMyColorIntent say my favorite color\nWhatsMyColorIntent tell me my favorite color\nWhatsMyColorIntent tell me what my favorite color is\n```\n\n\n## Cards\n\nThe `response.card(Object card)` method allows you to send [Home Cards](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/providing-home-cards-for-the-amazon-alexa-app) on the Alexa app, the companion app available for Fire OS, Android, iOS, and desktop web browsers.\n\nThe full specification for the `card` object passed to this method can be found [here](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/alexa-skills-kit-interface-reference#card-object).\n\nCards do not support SSML\n\nIf you just want to display a card that presents the user to link their account call `response.linkAccount()` as a shortcut.\n\n\n### Card Examples\n\nDisplay text only, aka [Simple](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/providing-home-cards-for-the-amazon-alexa-app#Creating%20a%20Basic%20Home%20Card%20to%20Display%20Text).\n\n```javascript\nresponse.card({\n  type: \"Simple\",\n  title: \"My Cool Card\", // this is not required for type Simple\n  content: \"This is the\\ncontent of my card\"\n});\n```\n\nDisplay text and image, aka [Standard](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/providing-home-cards-for-the-amazon-alexa-app#Creating%20a%20Home%20Card%20to%20Display%20Text%20and%20an%20Image).\n\nMake sure to read the restrictions on hosting the images. Must support CORS AND SSL cert signed by an Amazon approved certification authority.\n\n```javascript\nresponse.card({\n  type: \"Standard\",\n  title: \"My Cool Card\", // this is not required for type Simple or Standard\n  text: \"Your ride is on the way to 123 Main Street!\\nEstimated cost for this ride: $25\",\n  image: { // image is optional\n    smallImageUrl: \"https://carfu.com/resources/card-images/race-car-small.png\", // required\n    largeImageUrl: \"https://carfu.com/resources/card-images/race-car-large.png\"\n  }\n});\n```\n\n\n## Error Handling\n\nWhen handler functions throw exceptions, they will trigger a rejection in the promise chain. If the response has not already been sent, `.post` will be triggered which will allow you to force a successful response. If `post` does not alter the response, then a failed response will be sent. You can use this to throw an exception to or call `return response.fail(\"message\")` to force a failure, but this *does not* generate a response compatible with Alexa.\n\nThe `.error` handler method will capture any errors in the chain. The default behavior of `.error` is to trigger `response.send` if the response has not already been sent, but you can force or continue failure by returning a rejected promise or `throw`ing inside the error handler. Returning a promise allows you to do asynchronous operations in the error handler.\n\nIdeally, you should catch errors in your handlers and respond with an appropriate output to the user. Any exceptions can be handled by a generic error handler which you can define for your app. If you want error handling to be asynchronous, it must return a promise.\n\n```javascript\napp.error = function(exception, request, response) {\n  response.say(\"Sorry, something bad happened\");\n};\n```\n\nIf you do want exceptions to bubble out to the caller (and potentially cause Express to crash, for example), you can throw the exception from the error handler.\n\n```javascript\napp.error = function(exception, request, response) {\n  console.error(exception);\n  throw exception;\n};\n```\n\n\n## Asynchronous Handlers Example \n\nIf an intent or other request handler (including `pre` and `post`, but *not* `error`) will return a response later, it must a `Promise`. This tells the alexa-app library not to send the response automatically.\n\nIf the Promise resolves, the response will be sent. If it is rejected, it is treated as an error.\n\n```javascript\napp.intent(\"checkStatus\", function(request, response) {\n  // `getAsync` returns a Promise in this example. When\n  // returning a Promise, the response is sent after it\n  // resolves. If rejected, it is treated as an error.\n  return http.getAsync(\"http://server.com/status.html\").then(function (rc) {\n    response.say(rc.statusText);\n  });\n});\n```\n\nIf you want to respond immediately, you can use `return response.send()` to complete the respones. Using `throw msg` or `return response.fail(msg)` will trigger immediate failure. **Note:** `.post` is still run once after `response.send()` or `response.fail()` are called.\n\n```javascript\napp.intent(\"checkStatus\", function(request, response) {\n  if (currentStatus == \"bad\") {\n    return response.fail(\"bad status\");\n  }\n  else if (currentStatus == \"good\") {\n    response.say(\"good status\");\n    return response.send();\n  }\n\n  return http.getAsync(\"http://server.com/status.html\").then(function (rc) {\n    if (rc.body == \"bad\") {\n      throw \"bad status\";\n    }\n    response.say(\"good status\");\n    // return `response.send` to continue the promise chain\n    return response.send();\n  });\n});\n```\n\n### Customizing Default Error Messages\n\n```javascript\napp.messages.NO_INTENT_FOUND = \"Why you called dat intent? I don't know bout dat\";\n```\n\nSee the code for default messages you can override.\n\n\n### Read/write session data\n\n```javascript\napp.launch(function(request, response) {\n  request.getSession().set(\"number\", 42);\n  response.say(\"Would you like to know the number?\");\n  response.shouldEndSession(false);\n});\n\napp.intent(\"tellme\", function(request, response) {\n  var session = request.getSession();\n  response.say(\"The number is \" + session.get(\"number\"));\n  // clear only the 'number' attribute from the session\n  session.clear(\"number\");\n});\n\n// the session variables can be entirely cleared, or cleared by key\napp.intent(\"clear\", function(request, response) {\n  var session = request.getSession();\n  session.clear(); // or: session.clear(\"key\") to clear a single value\n  response.say(\"Session cleared!\");\n});\n```\n\nBy default, alexa-app will persist every request session attribute into the response. This way, any session attributes you set will be sent on every subsequent request, as is typical in most web programming environments. If you wish to disable this feature, you can do so by setting `app.persistentSession` to `false`.\n\n```javascript\nvar app = new alexa.app(\"test\");\napp.persistentSession = false;\n```\n\n\n### Define a custom endpoint name for an app\n\nWhen mapped to express, the default endpoint for each app is the name of the app. You can customize this using the second parameter to the `app()` method.\n\n```javascript\nvar app = new alexa.app(\"hello\", \"myEndpointName\");\n```\n\nAll named apps can be found in the `alexa.apps` object, keyed by name. The value is the app itself.\n\n\n## License\n\nCopyright (c) 2016-2017 Matt Kruse\n\nMIT License, see [LICENSE](LICENSE.md) for details.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/alexa-js/alexa-app.git"
  },
  "scripts": {
    "coverage": "istanbul cover _mocha -- -R spec",
    "danger": "danger",
    "lint": "eslint index.js;",
    "test": "mocha",
    "test-with-coverage": "./node_modules/istanbul/lib/cli.js cover ./node_modules/mocha/bin/_mocha -- -R spec ./test/*.js"
  },
  "version": "4.0.0"
}
